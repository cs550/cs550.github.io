%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
2 0 /Courier-Bold FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 50 Q
0 X
0 0 0 1 0 0 0 K
(EXOKERNELS) 222.35 614.67 T
1 1 0 0 0 0 1 K
0 24 Q
1 1 0 0 0 0 1 K
(Dawson Engler) 147.2 514 T
(, Frans Kaashoek, James O\325T) 301.67 514 T
(oole) 603.47 514 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(MIT Laboratory for Computer Science) 194.7 426 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 F
(http://www) 257.08 338 T
(.pdos.lcs.mit.edu/) 364.24 338 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Ambitious applications must \336ght OS) 72 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(OS abstractions pr) 108 620 T
(eempt application design decisions since:) 300.91 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(No perfect implementation exists) 144 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(No perfect interface exists) 144 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Y) 144 488 T
(ou cannot avoid them) 158.66 488 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Result: applications run slowly or can\325t be written) 108 444 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Exokernel: maximize application fr) 72 696 T
(eedom) 616.32 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Insight: implement OS abstractions at application-level) 108 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(How: secur) 108 576 T
(ely multiplex hardwar) 224.21 576 T
(e without abstracting it) 451.78 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Export hardwar) 144 532 T
(e to applications) 310.9 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Pr) 144 488 T
(otection by thin OS veneer) 168.89 488 T
(, the exokernel) 438.67 488 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(System objects and policies in untrusted libraries) 144 444 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 400 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
-0.1 (Result: Can do operations impossible on traditional systems) 108 400 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Exokernel ar) 72 696 T
(chitectur) 272.34 696 T
(e) 409.64 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 361.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(An exokernel safely exports hardwar) 108 361.33 T
(e to applications) 486.19 361.33 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 317.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Applications build abstractions with library OSs) 108 317.33 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 273.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Shar) 108 273.33 T
(ed libraries to r) 156.91 273.33 T
(educe space consumption) 315.79 273.33 T
0 0 0 1 0 0 0 K
72 252 720 720 C
111.75 425.33 680.25 684 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
129.75 432.83 669.75 469.5 R
11 X
0 1 0 0 1 0 1 K
V
0.5 H
0 Z
0 X
N
0 0 0 1 0 0 0 K
237.75 468.83 598.58 518 R
7 X
0 0 0 1 0 0 0 K
V
0 X
N
0 24 Q
(Exokernel) 120.75 491.87 T
(Frame Buffer) 147.75 441.83 T
(TLB) 306.73 441.83 T
(Network) 372.75 443.75 T
(Memory) 480.75 446.87 T
(Disk) 605.07 443.75 T
291.75 468.83 291.75 432.83 2 L
2 Z
N
363.75 468.83 363.75 432.83 2 L
N
471.75 468.83 471.75 432.83 2 L
N
579.75 468.83 579.75 432.83 2 L
N
(Secur) 336.75 486.83 T
(e bindings) 394.97 486.83 T
90 450 99 20.92 417.75 492.92 A
0 1 1 0 1 0 0 K
157.5 535.33 282.5 675.33 18 RR
14 X
0 1 1 0 1 0 0 K
V
0 X
N
1 0 1 0 0 1 0 K
334.67 537.33 459.67 673.17 18 RR
10 X
1 0 1 0 0 1 0 K
V
0 X
N
0 0 0 1 0 0 0 K
J
157.5 625.33 282.5 625.33 2 L
J
157.5 625.33 161.25 625.33 2 L
0 0 0 1 0 0 0 K
N
[7.437 6.445] 7.437 I
161.25 625.33 278.75 625.33 2 L
N
J
278.75 625.33 282.5 625.33 2 L
N
J
(WWW) 188.33 601.17 T
J
157.5 589.5 282.5 589.5 2 L
J
157.5 589.5 161.25 589.5 2 L
N
[7.437 6.445] 7.437 I
161.25 589.5 278.75 589.5 2 L
N
J
278.75 589.5 282.5 589.5 2 L
N
J
208.33 589.5 208.33 535.33 2 L
J
208.33 589.5 208.33 585.75 2 L
N
[7.217 6.254] 7.217 I
208.33 585.75 208.33 539.08 2 L
N
J
208.33 539.08 208.33 535.33 2 L
N
J
(TCP) 159.17 558.67 T
(POSIX) 209.17 558.67 T
J
335.83 625.33 460 624.5 2 L
J
335.83 625.33 339.58 625.31 2 L
N
[7.384 6.4] 7.384 I
339.58 625.31 456.25 624.53 2 L
N
J
456.25 624.53 460 624.5 2 L
N
J
(Barnes-Hut) 340.83 639.5 T
J
335 590.33 460 590.33 2 L
J
335 590.33 338.75 590.33 2 L
N
[7.437 6.445] 7.437 I
338.75 590.33 456.25 590.33 2 L
N
J
456.25 590.33 460 590.33 2 L
N
J
(IPC) 346.67 570.33 T
(VM) 406.67 570.33 T
(Exception) 348.33 543.67 T
(CRL) 371.67 600.33 T
(Mosaic) 178.33 642 T
1 1 0 0 0 0 1 K
515.17 536 640.17 671.83 18 RR
13 X
1 1 0 0 0 0 1 K
V
0 X
N
0 0 0 1 0 0 0 K
J
515 625.33 639.17 625.33 2 L
J
515 625.33 518.75 625.33 2 L
0 0 0 1 0 0 0 K
N
[7.384 6.399] 7.384 I
518.75 625.33 635.42 625.33 2 L
N
J
635.42 625.33 639.17 625.33 2 L
N
J
(DOOM) 544.17 641.17 T
(DOS/VM) 529.17 586.17 T
253.66 461.46 241.67 461.17 251.68 467.77 252.67 464.62 4 Y
V
314.67 487.54 326.67 487.83 316.65 481.23 315.66 484.38 4 Y
V
252.67 464.62 315.66 484.38 2 L
1 H
0 Z
N
344.34 465.93 333.33 461.17 340.14 471.05 342.24 468.49 4 Y
V
345.65 475.57 356.66 480.34 349.85 470.46 347.75 473.01 4 Y
V
342.25 468.49 347.75 473.01 2 L
N
409.19 470.46 412.5 482 415.81 470.46 412.5 470.46 4 Y
V
415.81 468.53 412.5 457 409.19 468.53 412.5 468.53 4 Y
V
412.5 470.46 412.5 468.53 2 L
N
467.89 474.33 457.5 480.33 469.49 480.75 468.69 477.54 4 Y
V
507.11 471.34 517.5 465.34 505.5 464.92 506.3 468.13 4 Y
V
468.69 477.54 506.31 468.13 2 L
N
514.96 484.46 505 491.17 516.99 490.76 515.97 487.61 4 Y
V
585.05 468.7 595 462 583.01 462.41 584.03 465.55 4 Y
V
515.97 487.61 584.03 465.55 2 L
N
263.91 541.66 254.16 548.67 266.14 547.89 265.02 544.78 4 Y
V
367.75 511.5 377.5 504.5 365.52 505.28 366.64 508.39 4 Y
V
265.03 544.78 366.64 508.39 2 L
N
405.27 529.56 408.33 541.17 411.89 529.71 408.58 529.64 4 Y
V
412.22 514.44 409.16 502.84 405.61 514.3 408.91 514.37 4 Y
V
408.58 529.63 408.92 514.36 2 L
N
465.03 509.67 453.33 507 461.84 515.46 463.43 512.57 4 Y
V
539.97 558.5 551.66 561.17 543.16 552.71 541.56 555.6 4 Y
V
463.44 512.57 541.56 555.6 2 L
N
72 252 720 720 C
0 180 792 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Advantages of library operating systems) 72 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(T) 108 620 T
(ightly coupled to applications) 123.58 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Simple specialized implementations) 144 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(New abstractions) 144 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Libraries can trust applications) 144 488 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Fast system evolution) 108 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Library operating systems can be developed in isolation) 144 400 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Anyone can develop, modify library OS) 144 356 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Crucial: # of application writers >> kernel hackers) 144 312 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Challenges of application contr) 72 696 T
(ol) 550.37 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Pr) 108 620 T
(eventing system chaos) 132.89 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Use standards and good pr) 144 576 T
(ogramming methodology) 418.27 576 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Portability) 108 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Standard solution: hardwar) 144 488 T
(e abstraction layer) 430.27 488 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Decentralizing services) 108 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Use kernel pr) 144 400 T
(otection mechanism to r) 282.22 400 T
(eplace servers) 527.74 400 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 356 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Reconcile global performance with local optimization) 108 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Maximize application contr) 72 696 T
(ol) 495.32 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Fine-grain multiplexing of hardwar) 108 620 T
(e) 472.25 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Low-level interface) 108 576 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Limit kernel r) 108 532 T
(esour) 252.89 532 T
(ce management to pr) 308.45 532 T
(otection) 523.3 532 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 488 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Revoke r) 108 488 T
(esour) 200.21 488 T
(ces visibly) 255.77 488 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Expose kernel data structur) 108 444 T
(es, hardwar) 393.55 444 T
(e, and names) 514.44 444 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Example: virtual memory) 72 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 350 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Revocation: ask application for physical page) 108 350 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 306 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(If application is uncooperative, take pages by for) 108 306 T
(ce) 606.24 306 T
0 0 0 1 0 0 0 K
72 252 720 720 C
110.25 414 681.75 684 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
245.25 486 641.25 567 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 18 Q
(Exokernel) 146.25 500.17 T
243.75 606.83 581.25 669.83 18 RR
N
(allocate\050&pa\051) 267.25 644.5 T
(Library OS) 128.92 637.83 T
411.42 615.33 567.25 641.17 R
N
435.58 642 435.58 615.33 2 L
N
463.08 641.17 463.08 615.33 2 L
N
486.92 641.5 486.92 615.67 2 L
N
513.25 640.17 513.25 614.33 2 L
N
537.92 640.5 537.92 614.67 2 L
N
(Page table) 428.08 647.83 T
346.7 571.75 326.24 567 341.08 581.87 343.89 576.81 4 Y
V
407.25 612 343.9 576.8 2 L
3 H
N
(map\050va,pa\051) 254.25 585 T
479.25 423 569.25 477 R
1 H
N
524.25 477 524.25 423 2 L
N
479.25 450 569.25 450 2 L
N
(Pages) 254.25 522 T
(Contexts) 317.25 495 T
317.25 513 425.25 558 R
N
317.25 531 425.25 531 2 L
N
344.25 558 344.25 513 2 L
N
371.25 558 371.25 513 2 L
N
398.25 558 398.25 513 2 L
N
(r) 326.25 540 T
(w) 380.25 522 T
(w) 380.25 540 T
(V) 488.25 459 T
(A) 498.92 459 T
(P) 533.25 459 T
(A) 542.92 459 T
(0x3) 488.25 432 T
(0xA) 533.25 432 T
(TLB) 425.25 450 T
578.25 495 614.25 558 R
N
578.25 540 614.25 540 2 L
0.5 H
N
578.25 522 614.25 522 2 L
N
(Fr) 515.25 531 T
(eelist) 533.92 531 T
(Forwarded TLB Fault) 461.25 585 T
467.68 476.54 479.24 459.01 460.15 467.75 463.92 472.14 4 Y
V
416.25 513 463.92 472.14 2 L
3 H
N
446.16 588.14 452.24 612 459.72 588.54 452.94 588.34 4 Y
V
190.09 270 45 135 497.25 612 A
72 252 720 720 C
0 180 792 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Aegis: A pr) 72 696 T
(ototype MIPS exokernel) 247.32 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Physical memory) 108 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(TLB entries) 108 576 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(T) 108 532 T
(ime slices) 123.58 532 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 488 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Network) 108 488 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Envir) 108 444 T
(onments \050pr) 166.25 444 T
(ocess as de\336ned by hardwar) 290.47 444 T
(e\051:) 576.72 444 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(1.) 108 400 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Interrupt/exception forwarding vector) 144 400 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(2.) 108 362 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Pinned virtual mappings) 144 362 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(3.) 108 324 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Contr) 144 324 T
(ol transfer entry points) 204.89 324 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Aegis performance on DEC5000/25Mhz) 72 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 278 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Easy to make simple operations fast) 108 278 T
0 0 0 1 0 0 0 K
72 252 720 720 C
182.88 342 609.12 684 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 -36 -19 289 222 408 327 188.88 351 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Page: 1 1
%%BoundingBox: -36 -19 289 222
%%EndComments
1 setlinecap 1 setlinejoin
0.700 setlinewidth
0.00 setgray

/Jrnd { exch cvi exch cvi dup 3 1 roll idiv mul } def
/JDEdict 8 dict def
JDEdict /mtrx matrix put
/JDE {
  JDEdict begin
  /yrad exch def
  /xrad exch def
  /savematrix mtrx currentmatrix def
  xrad yrad scale
  0 0 1 0 360 arc
  savematrix setmatrix
  end
} def
/JSTR {
  gsave 1 eq { gsave 1 setgray fill grestore } if
    exch neg exch neg translate 
    clip                        
    rotate                      
    4 dict begin
      pathbbox  /&top exch def
                /&right exch def
                /&bottom exch def
                &right sub /&width exch def
      newpath
      currentlinewidth mul round dup               
      &bottom exch Jrnd exch &top             
      4 -1 roll currentlinewidth mul setlinewidth  
      { &right exch moveto &width 0 rlineto stroke } for    
    end
  grestore
  newpath
} bind def
 gsave /Times-Roman findfont 9.000000 scalefont setfont
0.000000 0.000000 translate
0.700000 setlinewidth  gsave newpath 0.000000 0.000000 moveto 216.000000 0.000000 lineto stroke
/Times-Roman findfont 18.000000 scalefont setfont
gsave 14.400001 -8.000000 translate 0.000000 rotate
0 -10.800000 translate (Exceptions) dup stringwidth pop 2 div neg 0 moveto
show
grestore
gsave 110.400002 -8.000000 translate 0.000000 rotate
0 -10.800000 translate (IPC) dup stringwidth pop 2 div neg 0 moveto
show
grestore
gsave 206.400009 -8.000000 translate 0.000000 rotate
0 -10.800000 translate (Message demultiplex) dup stringwidth pop 2 div neg 0 moveto
show
grestore
 grestore 
0.700000 setlinewidth  gsave newpath 0.000000 0.000000 moveto 0.000000 216.000000 lineto stroke
newpath 0.000000 0.000000 moveto -5.000000 0.000000 lineto stroke
newpath 0.000000 10.800000 moveto -2.000000 10.800000 lineto stroke
newpath 0.000000 21.600000 moveto -2.000000 21.600000 lineto stroke
newpath 0.000000 32.400002 moveto -2.000000 32.400002 lineto stroke
newpath 0.000000 43.200001 moveto -2.000000 43.200001 lineto stroke
newpath 0.000000 54.000000 moveto -5.000000 54.000000 lineto stroke
newpath 0.000000 64.800003 moveto -2.000000 64.800003 lineto stroke
newpath 0.000000 75.599998 moveto -2.000000 75.599998 lineto stroke
newpath 0.000000 86.400002 moveto -2.000000 86.400002 lineto stroke
newpath 0.000000 97.200005 moveto -2.000000 97.200005 lineto stroke
newpath 0.000000 108.000000 moveto -5.000000 108.000000 lineto stroke
newpath 0.000000 118.800003 moveto -2.000000 118.800003 lineto stroke
newpath 0.000000 129.600006 moveto -2.000000 129.600006 lineto stroke
newpath 0.000000 140.400009 moveto -2.000000 140.400009 lineto stroke
newpath 0.000000 151.199997 moveto -2.000000 151.199997 lineto stroke
newpath 0.000000 162.000000 moveto -5.000000 162.000000 lineto stroke
newpath 0.000000 172.800003 moveto -2.000000 172.800003 lineto stroke
newpath 0.000000 183.600006 moveto -2.000000 183.600006 lineto stroke
newpath 0.000000 194.400009 moveto -2.000000 194.400009 lineto stroke
newpath 0.000000 205.199997 moveto -2.000000 205.199997 lineto stroke
newpath 0.000000 216.000000 moveto -5.000000 216.000000 lineto stroke
/Times-Roman findfont 9.000000 scalefont setfont
gsave -8.000000 0.000000 translate 0.000000 rotate
0 -2.700000 translate (0) dup stringwidth pop neg 0 moveto
show
grestore
gsave -8.000000 54.000000 translate 0.000000 rotate
0 -2.700000 translate (5) dup stringwidth pop neg 0 moveto
show
grestore
gsave -8.000000 108.000000 translate 0.000000 rotate
0 -2.700000 translate (10) dup stringwidth pop neg 0 moveto
show
grestore
gsave -8.000000 162.000000 translate 0.000000 rotate
0 -2.700000 translate (15) dup stringwidth pop neg 0 moveto
show
grestore
gsave -8.000000 216.000000 translate 0.000000 rotate
0 -2.700000 translate (20) dup stringwidth pop neg 0 moveto
show
grestore
/Times-Bold findfont 18.000000 scalefont setfont
gsave -24.639999 108.000000 translate 90.000000 rotate
0 0.000000 translate (Microseconds) dup stringwidth pop 2 div neg 0 moveto
show
grestore
 grestore 
 gsave 
 gsave  gsave  9.600000 16.200001 translate 0.000000 rotate
 newpath 3.600000 0.000000 moveto  -3.600000 0.000000 lineto
  -3.600000 -16.200001 lineto
  3.600000 -16.200001 lineto
closepath gsave 1.000000 0.000000 0.000000 setrgbcolor  fill grestore
stroke
 grestore  gsave  105.600006 15.120000 translate 0.000000 rotate
 newpath 3.600000 0.000000 moveto  -3.600000 0.000000 lineto
  -3.600000 -15.120000 lineto
  3.600000 -15.120000 lineto
closepath gsave 1.000000 0.000000 0.000000 setrgbcolor  fill grestore
stroke
 grestore  gsave  201.600006 16.200001 translate 0.000000 rotate
 newpath 3.600000 0.000000 moveto  -3.600000 0.000000 lineto
  -3.600000 -16.200001 lineto
  3.600000 -16.200001 lineto
closepath gsave 1.000000 0.000000 0.000000 setrgbcolor  fill grestore
stroke
 grestore  grestore 
 gsave  gsave  19.200001 103.680008 translate 0.000000 rotate
 newpath 3.600000 0.000000 moveto  -3.600000 0.000000 lineto
  -3.600000 -103.680008 lineto
  3.600000 -103.680008 lineto
closepath gsave 0.000000 0.000000 1.000000 setrgbcolor  fill grestore
stroke
 grestore  gsave  115.200005 100.440002 translate 0.000000 rotate
 newpath 3.600000 0.000000 moveto  -3.600000 0.000000 lineto
  -3.600000 -100.440002 lineto
  3.600000 -100.440002 lineto
closepath gsave 0.000000 0.000000 1.000000 setrgbcolor  fill grestore
stroke
 grestore  gsave  211.200012 205.199997 translate 0.000000 rotate
 newpath 3.600000 0.000000 moveto  -3.600000 0.000000 lineto
  -3.600000 -205.199997 lineto
  3.600000 -205.199997 lineto
closepath gsave 0.000000 0.000000 1.000000 setrgbcolor  fill grestore
stroke
 grestore  grestore 
 grestore 
 gsave 9.600000 205.199997 translate 0.000000 rotate
 gsave  gsave  0.000000 10.800001 translate 0.000000 rotate
 newpath -3.600000 -2.000000 moveto  3.600000 -2.000000 lineto
  3.600000 2.000000 lineto
  -3.600000 2.000000 lineto
closepath gsave 1.000000 0.000000 0.000000 setrgbcolor  fill grestore
stroke
 grestore  grestore 
/Times-Roman findfont 18.000000 scalefont setfont
gsave 7.600000 16.200001 translate 0.000000 rotate
0 -10.800000 translate (Aegis) dup stringwidth pop pop 0 0 moveto
show
grestore
 gsave  gsave  0.000000 -10.800001 translate 0.000000 rotate
 newpath -3.600000 -2.000000 moveto  3.600000 -2.000000 lineto
  3.600000 2.000000 lineto
  -3.600000 2.000000 lineto
closepath gsave 0.000000 0.000000 1.000000 setrgbcolor  fill grestore
stroke
 grestore  grestore 
gsave 7.600000 -5.400000 translate 0.000000 rotate
0 -10.800000 translate (Best in literature) dup stringwidth pop pop 0 0 moveto
show
grestore
 grestore 
-0.000000 -0.000000 translate
 grestore 

%%EndDocument
FMENDEPSF
72 252 720 720 C
0 180 792 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(ExOS: an application-library OS) 72 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Rudimentary UNIX-like library) 108 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Completely implemented in application space) 108 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(1.) 108 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Pr) 144 532 T
(ocesses \050fork, exec\051) 168.89 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(2.) 108 494 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(IPC \050signals, LRPC, shar) 144 494 T
(ed memory) 402.91 494 T
(, and pipes\051) 516.89 494 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(3.) 108 456 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(V) 144 456 T
(irtual memory \050sbrk, mmap, shar) 160.44 456 T
(ed memory\051) 503.98 456 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(4.) 108 418 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Exception handling \050fast user) 144 418 T
(-level traps\051) 443.81 418 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(5.) 108 380 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Networking \050IP pr) 144 380 T
(otocols, NFS, Sun RPC\051) 332.88 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Application-level VM \050A) 72 696 T
(VM\051) 445.32 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Flexibility examples with A) 108 620 T
(VM:) 384.24 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(1.) 108 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Fine-grained monitoring \050hardwar) 144 576 T
(e is visible\051) 499.56 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(2.) 108 538 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(T) 144 538 T
(ighter integration with other abstractions) 159.58 538 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 476 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Performance \050times in) 108 476 T
3 F
(m) 341.93 476 T
0 F
(sec\051:) 355.75 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(OS) 214.39 413 T
(Dirty) 332.68 413 T
(Appel1) 434.93 413 T
(Appel2) 542.93 413 T
(Ultrix) 170.4 373 T
(n.a.) 341.33 373 T
(262) 453.6 373 T
(232) 561.6 373 T
(ExOS) 170.4 333 T
(9.8) 345 333 T
(34) 459.6 333 T
(22) 567.6 333 T
158.4 439 158.4 318.25 2 L
V
0.5 H
0 Z
N
302.4 441 302.4 317.75 2 L
V
N
417.6 441 417.6 317.75 2 L
V
N
525.6 441 525.6 317.75 2 L
V
N
633.6 439 633.6 318.25 2 L
V
N
158.15 440 633.85 440 2 L
V
2 H
N
158.65 399.25 633.35 399.25 2 L
V
0.5 H
N
158.65 396.75 633.35 396.75 2 L
V
N
158.15 358 633.85 358 2 L
V
N
158.15 318 633.85 318 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Extending A) 72 696 T
(VM) 260.39 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Linear versus cluster) 108 620 T
(ed page-tables [SOSP 95]) 323.54 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Performance \050times in) 108 576 T
3 F
(m) 341.93 576 T
0 F
(sec\051:) 355.75 576 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 372 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Easy to modify library OS:) 108 372 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Implemented in library in few weeks by undergrad) 144 328 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Dif\336cult to do even as trusted user on traditional OS) 144 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Structur) 109.3 513 T
(e) 196.85 513 T
(\050un\051Pr) 252.62 513 T
(ot1) 320.18 513 T
(Pr) 391.56 513 T
(ot100) 416.45 513 T
(Appel1) 506.93 513 T
(Appel2) 614.93 513 T
(Cluster) 98.4 473 T
(13) 290.4 473 T
(238) 414 473 T
(25) 531.6 473 T
(15) 639.6 473 T
(Linear) 98.4 433 T
(16.9) 281.4 433 T
(109) 414 433 T
(34) 531.6 433 T
(22) 639.6 433 T
86.4 539 86.4 418.25 2 L
V
0.5 H
0 Z
N
230.4 541 230.4 417.75 2 L
V
N
374.4 541 374.4 417.75 2 L
V
N
489.6 541 489.6 417.75 2 L
V
N
597.6 541 597.6 417.75 2 L
V
N
705.6 539 705.6 418.25 2 L
V
N
86.15 540 705.85 540 2 L
V
2 H
N
86.65 499.25 705.35 499.25 2 L
V
0.5 H
N
86.65 496.75 705.35 496.75 2 L
V
N
86.15 458 705.85 458 2 L
V
N
86.15 418 705.85 418 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Extensibility example: T) 72 696 T
(rusted LRPC) 445.36 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(T) 108 620 T
(rusted LRPC: trust server to save and r) 122.23 620 T
(estor) 529.06 620 T
(e r) 579.26 620 T
(egisters) 606.14 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 416 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Pay for what you need) 108 416 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(LRPC system) 181.68 557 T
(Performance \050) 440.14 557 T
3 F
(m) 587.4 557 T
0 F
(sec\051) 601.22 557 T
(Traditional LRPC) 120 517 T
(6.9) 525 517 T
(Trusted LRPC) 120 477 T
(2.9) 525 477 T
108 583 108 463 2 L
V
2 H
0 Z
N
396 585 396 461 2 L
V
N
684 583 684 463 2 L
V
N
107 584 685 584 2 L
V
N
109 543.25 683 543.25 2 L
V
0.5 H
N
109 540.75 683 540.75 2 L
V
N
107 502 685 502 2 L
V
2 H
N
107 462 685 462 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Summary of paper r) 72 696 T
(esults) 386.32 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Simple kernel primitives ar) 108 620 T
(e fast) 388.22 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(OS abstractions can be ef\336ciently implemented as libraries) 108 576 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Extensibility gives substantial performance bene\336ts) 108 532 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 186 720 205.5 R
7 X
0 0 0 1 0 0 0 K
V
72 684 720 684 2 L
V
4 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 36 Q
(Summary) 72 696 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 24 Q
0 1 1 0 1 0 0 K
(\245) 85.75 620 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Pr) 108 620 T
(oblem: OS abstractions hurt applications) 132.89 620 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 576 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Insight: Secur) 108 576 T
(ely export hardwar) 252.24 576 T
(e without abstracting it) 449.11 576 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(How: Exokernel ar) 108 532 T
(chitectur) 303.55 532 T
(e) 395.09 532 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Kernel interface at hardwar) 144 488 T
(e level) 432.17 488 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(OS abstractions in untrusted libraries) 144 444 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(\245) 85.75 400 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Advantages:) 108 400 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Can do operations not possible on traditional systems) 144 356 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Large implementor base = fast system evolution) 144 312 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 16
%%DocumentFonts: Times-Bold
%%+ Times-BoldItalic
%%+ Courier-Bold
%%+ Symbol
%%EOF
